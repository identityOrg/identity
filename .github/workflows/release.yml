#on:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#      - 'v*'
#
#name: Build For Release
#
#jobs:
#  build:
#    name: Build for Release
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#      - name: Checkout code
#        uses: actions/checkout@master
#      - name: Build project # This would actually build your project, using zip for an example artifact
#        run: mvn -B package -DskipTests
#      - name: Find Project Version
#        run: VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: false
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./target/identity-${{ env.VERSION }}.jar
#          asset_name: identity-${{ env.VERSION }}.jar
#          asset_content_type: application/zip